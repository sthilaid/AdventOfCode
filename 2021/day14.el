(defun simulate (polymer rules)
  (message "rules: %s" rules)
  (let ((new-polymer '()))
    (dotimes (atom-index (1- (length polymer)))
      (let* ((atom-1 (seq-elt polymer atom-index))
             (atom-2 (seq-elt polymer (1+ atom-index)))
             (rule (assoc (list atom-1 atom-2) rules)))
        (message "atom-1: %s atom-2: %s rule: %s" atom-1 atom-2 rule)
        (push 'atom-1 new-polymer)
        (push 'atom-2 new-polymer)
        (if rule (push (second rule) new-polymer))))
    (seq-reverse new-polymer)))

(defun solve-part1 (polymer rules)
  (let ((results '()))
    (seq-doseq (left-rule (first rules))
      (seq-doseq (atom left-rule)
        (if (not (assoc atom results))
            (push (list atom 0) results))))
    (seq-doseq (left-rule (second rules))
      (seq-doseq (atom left-rule)
        (if (not (assoc atom results))
            (push (list atom 0) results))))
    
    (dotimes (step-index 5)
      (simulate polymer rules))

    (seq-doseq (atom polymer)
      (let ((res (assoc atom results)))
        (setf (second res) (1+ (second res)))))
    results))

(defun solve-part2 (polymer rules) 0)

(defun solve (input-file)
  (defun current-line () (buffer-substring-no-properties (line-beginning-position) (line-end-position)))
  (let* ((input (if (file-exists-p input-file)
                    (with-temp-buffer
                      (insert-file-contents input-file)
                      (let ((init-polymer (buffer-substring-no-properties (line-beginning-position)
                                                                          (line-end-position))))
                        (forward-line 2)
                        (beginning-of-line)
                        (list
                         init-polymer
                         (seq-map (lambda (line) (split-string line "->"))
                                  (split-string (buffer-substring-no-properties (point) (point-max)) "\n")))))
                  (message (concat "Could not find file " input-file)))))
    (let* ((initial-polymer (first input))
           (rules (second input))
           (part1 (solve-part1 (copy-sequence initial-polymer) rules))
           (part2 (solve-part2 initial-polymer rules)))
      (message "part1: %s | part2: %s" part1 part2))))

(solve "day14-test-input.txt")
(solve "day14-input.txt")
