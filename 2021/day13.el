(defun solve-part1 (coords folds)
  (dolist (fold folds)
    (let ((dir (first fold))
          (amount (second fold)))
      (if (string= dir "x")
          (dolist (point coords)
            (let ((x (first point)))
              (if (> x amount)
                  (setf (first point) (+ amount (- amount x))))))
        (if (string= dir "y")
          (dolist (point coords)
            (let ((y (second point)))
              (if (> y amount)
                  (setf (second point) (+ amount (- amount y))))))))))
  (let ((unique-coords '()))
    (dolist (point coords)
      (if (not (seq-find (lambda (c) (equal c point)) unique-coords))
          (push point unique-coords)))
    (length unique-coords)))

(defun solve-part2 (coords folds)
  0)

(defun solve (input-file)
  (defun current-line () (buffer-substring-no-properties (line-beginning-position) (line-end-position)))
  (let* ((input (if (file-exists-p input-file)
                    (with-temp-buffer
                      (insert-file-contents input-file)
                      (beginning-of-buffer)
                      (let ((coords '())
                            (folds '()))
                        (let ((line (current-line)))
                          (while (and (not (eobp))
                                      (not (string= "" line)))
                            (push (seq-map 'string-to-number (split-string line ","))
                                  coords)
                            (forward-line)
                            (setq line (current-line))))
                        (forward-line)
                        (let ((line (current-line)))
                          (while (and (not (eobp))
                                      (not (string= "" line)))
                            (push (split-string (substring line 11) "=")
                                  folds)
                            (forward-line)
                            (setq line (current-line))))
                        (list (seq-reverse coords) (seq-reverse (seq-map (lambda (x) (list (first x) (string-to-number (second x))))
                                                                         folds)))))
                  (message (concat "Could not find file " input-file)))))
    (let* ((coords (first input))
           (folds (second input))
           (part1 (solve-part1 coords folds))
           (part2 (solve-part2 coords folds)))
      (message "part1: %s | part2: %s" part1 part2))))

(solve "day13-test-input.txt")
(solve "day13-input.txt")
