(defun find-gridsize (vent-lines)
  (let ((min-x most-positive-fixnum)
        (max-x most-negative-fixnum)
        (min-y most-positive-fixnum)
        (max-y most-negative-fixnum))
    (dolist (line vent-lines)
      (dolist (point line)
        (let ((x (first point))
              (y (second point)))
          (if (< x min-x) (setq min-x x))
          (if (> x max-x) (setq max-x x))
          (if (< y min-y) (setq min-y y))
          (if (> y max-y) (setq max-y y)))))
    (list min-x max-x min-y max-y)))

(defun point-equal? (p1 p2) (and (= (first p1) (first p2))
                                 (= (second p1) (second p2))))

(defun get-all-points-in-line (p1 p2)
  (defun sign (x) (cond ((= x 0) 0) ((> x 0) 1) (t -1)))
  (let* ((points (list p1))
         (p-x (first p1))
         (p-y (second p1))
         (p2-x (first p2))
         (p2-y (second p2))
         (dir-x (sign (- p2-x (first p1))))
         (dir-y (sign (- p2-y (second p1)))))
    (while (or (not (= p-x p2-x)) (not (= p-y p2-y)))
      (setq p-x (+ p-x dir-x))
      (setq p-y (+ p-y dir-y))
      (push (list p-x p-y) points))
    points))

(defun get-grid-count (vent-lines pred?)
  (let* ((gridsize (find-gridsize vent-lines))
         (min-x (first gridsize))
         (max-x (second gridsize))
         (min-y (third gridsize))
         (max-y (fourth gridsize))
         (delta-x (1+ (- max-x min-x)))
         (delta-y (1+ (- max-y min-y)))
         (grid (make-vector (* delta-x delta-y) 0)))
    (dolist (line vent-lines)
      (let ((p1 (first line))
            (p2 (second line)))
        (if (funcall pred? p1 p2)
            (dolist (line-point (get-all-points-in-line p1 p2))
              (let* ((x (first line-point))
                     (y (second line-point))
                     (grid-index (+ (- x min-x) (* delta-x (- y min-y)))))
                (aset grid grid-index (1+ (aref grid grid-index))))))))
    (seq-count (lambda (p) (> p 1)) grid)))

(defun solve-part1 (vent-lines)
  (defun is-flat? (p1 p2) (or (= (first p1) (first p2))
                              (= (second p1) (second p2))))
  (get-grid-count vent-lines 'is-flat?))

(defun solve-part2 (vent-lines)
  (get-grid-count vent-lines (lambda (x y) t)))

(defun parse-line (line-str))
(defun solve (input-file)
  (let ((input-string (if (file-exists-p input-file)
                          (with-temp-buffer
                            (insert-file-contents input-file)
                            (buffer-string))
                        (message (concat "Could not find file " input-file)))))
    (let* ((vent-lines (mapcar (lambda (line)
                                 (mapcar (lambda (point)
                                           (mapcar (lambda (num) (string-to-number num))
                                                   (split-string point ",")))
                                         (split-string line " -> ")))
                               (seq-filter (lambda (s) (not (string= s ""))) (split-string input-string "\n"))))
           (part1 (solve-part1 vent-lines))
           (part2 (solve-part2 vent-lines)))
      (message "part1: %s | part2: %s" part1 part2))))

(solve "day5-test-input.txt")
(solve "day5-input.txt")
