(defun calc-elves-calories (data)
  (seq-reduce (lambda (acc x) (if (= x 0)
                                  (cons 0 acc)
                                (cons (+ (car acc) x) (cdr acc))))
              data
              '(0)))

(defun solve1 (data)
  (seq-max (calc-elves-calories data)))

(defun solve2 (data)
  (defun sum (lst) (seq-reduce '+ lst 0))
  (sum (seq-reduce (lambda (acc x) (cond ((> x (elt acc 0)) (list x (elt acc 0) (elt acc 1)))
                                         ((> x (elt acc 1)) (list (elt acc 0) x (elt acc 1)))
                                         ((> x (elt acc 2)) (list (elt acc 0) (elt acc 1) x))
                                         (t acc)))
                   (calc-elves-calories data)
                   '(0 0 0))))

(defun solve (input-file)
  (defun current-line () (buffer-substring-no-properties (line-beginning-position) (line-end-position)))
  (let* ((input (if (file-exists-p input-file)
                    (with-temp-buffer (insert-file-contents input-file)
                                      (beginning-of-buffer)
                                      (let ((data '()))
                                        (while (< (point) (point-max))
                                          (push (string-to-number (current-line))
                                                data)
                                          (forward-line))
                                        data))
                  (message (concat "Could not find file " input-file)))))
    (let* ((part1 (solve1 input))
           (part2 (solve2 input)))
      (message "part1: %s | part2: %s" part1 part2))))

(solve "day1.testinput")
(solve "day1.nput")
